
R version 3.0.2 (2013-09-25) -- "Frisbee Sailing"
Copyright (C) 2013 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "GDELTtools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "GDELTtools-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('GDELTtools')
Loading required package: plyr
Loading required package: TimeWarp
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("GetGdelt")
> ### * GetGdelt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GetGDELT
> ### Title: Download and subset GDELT data
> ### Aliases: GetGDELT
> 
> ### ** Examples
> 
> ## Not run: 
> ##D test.filter <- list(ActionGeo_ADM1Code=c("NI", "US"), ActionGeo_CountryCode="US")
> ##D test.results <- GetGDELT(start.date="1979-01-01", end.date="1979-12-31", filter=test.filter)
> ##D table(test.results$ActionGeo_ADM1Code)
> ##D table(test.results$ActionGeo_CountryCode
> ## End(Not run)
> 
> # Specify a local folder to store the downloaded files
> ## Not run: 
> ##D test.results <- GetGDELT(start.date="1979-01-01", end.date="1979-12-31",
> ##D                          filter=test.filter,
> ##D                          local.folder="c:/gdeltdata",
> ##D                          max.local.mb=500)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GetGdelt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("NormEventCounts")
> ### * NormEventCounts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: NormEventCounts
> ### Title: Scale event counts
> ### Aliases: NormEventCounts
> 
> ### ** Examples
> 
> ## Not run: 
> ##D GDELT.subset.data <- GetGDELT("2012-01-01", "2012-12-31", allow.wildcards=TRUE,
> ##D                               filter=list(ActionGeo_CountryCode=c("AF", "US"), EventCode="14*"))
> ##D GDELT.normed.data <- NormEventCounts(x = GDELT.subset.data,
> ##D                                      unit.analysis="country.year",
> ##D                                      var.name="protest")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("NormEventCounts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("NormEventCountsData")
> ### * NormEventCountsData
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: NormEventCountsData
> ### Title: Normalization Factors for GDELT data, 1979-2012
> ### Aliases: NormEventCountsData
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(NormEventCountsData)
> str(NormEventCountsData)
List of 7
 $ countries      :'data.frame':	196 obs. of  2 variables:
  ..$ country.name: chr [1:196] "AFGHANISTAN" "ANGOLA" "ALBANIA" "ANDORRA" ...
  ..$ fips104     : chr [1:196] "AF" "AO" "AL" "AN" ...
  ..- attr(*, "na.action")=Class 'omit'  Named int [1:68] 1 4 5 11 12 13 27 30 36 40 ...
  .. .. ..- attr(*, "names")= chr [1:68] "1" "4" "5" "11" ...
 $ daily          :'data.frame':	12613 obs. of  2 variables:
  ..$ day  : int [1:12613] 19790210 19790410 19790610 19790810 19791010 19791210 19800210 19800410 19800610 19800810 ...
  ..$ total: int [1:12613] 825 1172 1148 1308 1267 1549 799 1629 1512 1747 ...
 $ daily.country  :'data.frame':	1801796 obs. of  3 variables:
  ..$ day    : int [1:1801796] 19790105 19790106 19790108 19790108 19790108 19790109 19790111 19790111 19790112 19790113 ...
  ..$ country: Factor w/ 263 levels "AA","AC","AE",..: 110 103 81 143 216 132 115 190 32 12 ...
  ..$ total  : int [1:1801796] 59 1 23 7 4 6 7 1 6 6 ...
 $ monthly        :'data.frame':	415 obs. of  2 variables:
  ..$ month: int [1:415] 198004 198204 198404 198604 198804 199004 199204 199404 199604 199804 ...
  ..$ total: int [1:415] 40402 61247 74581 96452 101710 83908 112952 128486 175319 361448 ...
 $ monthly.country:'data.frame':	90911 obs. of  3 variables:
  ..$ month  : int [1:90911] 197901 197901 197902 197903 197903 197905 197906 197907 197907 197907 ...
  ..$ country: Factor w/ 263 levels "AA","AC","AE",..: 89 164 212 131 197 114 26 7 97 170 ...
  ..$ total  : int [1:90911] 8 157 16 10 2 195 80 92 11 152 ...
 $ yearly         :'data.frame':	34 obs. of  2 variables:
  ..$ year : Factor w/ 36 levels "\\N","1979","1980",..: 23 6 16 17 20 28 32 11 13 18 ...
  ..$ total: int [1:34] 4540506 848806 1310741 1774666 3652082 3534874 23464598 1183220 1126957 1780524 ...
 $ yearly.country :'data.frame':	8490 obs. of  3 variables:
  ..$ year   : int [1:8490] 1979 1982 1984 1985 1987 1989 1990 1993 1995 1995 ...
  ..$ country: Factor w/ 263 levels "AA","AC","AE",..: 215 51 11 154 124 108 241 68 49 187 ...
  ..$ total  : int [1:8490] 601 95 3 37 2619 10228 29762 2143 458 21846 ...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("NormEventCountsData", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.94 0.03 0.98 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
